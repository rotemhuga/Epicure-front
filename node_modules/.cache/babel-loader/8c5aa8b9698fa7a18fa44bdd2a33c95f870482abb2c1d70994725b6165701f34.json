{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// const allRestaurant = fetch(\"http://localhost:8000/restaurants\")\n//   .then((response) => response.json())\n//   .then((data) => {\n//     return data;\n//   })\n//   .catch((err) => {\n//     console.log(err.message);\n//   });\n\n// const restaurant: IrestPorps = await allRestaurant;\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: {\n//     value: restaurant,\n//     filteredValue: restaurant,\n//   },\n\nconst getData = fetch(\"http://localhost:8000/epicure/restaurantsPage\").then(response => response.json()).then(data => {\n  return data;\n}).catch(err => {\n  console.log(err.message);\n});\nconst restaurant = await getData;\nconsole.log(restaurant);\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: restaurant\n  },\n  reducers: {\n    restaurantPageFilter: (state, action) => {\n      const filterType = action.payload;\n      switch (filterType) {\n        case \"all\":\n          state.value = restaurant;\n          break;\n        case \"new\":\n          state.value = restaurant;\n          state.value = state.value.filter(restaurant => restaurant.isNew === true);\n          break;\n        case \"mostPopular\":\n          state.value = restaurant;\n          state.value = state.value.filter(restaurant => restaurant.isPopular === true);\n          break;\n        case \"openNow\":\n          state.value = restaurant;\n          state.value = state.value.filter(restaurant => restaurant.isOpen === true);\n          break;\n        case \"mapView\":\n          state.value = restaurant;\n          state.value = state.value.filter(restaurant => restaurant.isNew === true);\n          break;\n        default:\n          state.value = state.value;\n      }\n    }\n  }\n});\nexport const {\n  restaurantPageFilter\n} = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: { value: [] },\n//   reducers: {\n//     // setRestaurants: (state, action) => {\n//     //   state.restaurants = action.payload;\n//     // },\n//     restaurantPageFilter: async (state, action) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/epicure\");\n//         const dataRest = await response.json();\n//         console.log(dataRest)\n//         state.value = dataRest\n//         let filterType = action.payload;\n//         switch (action.payload) {\n//           case \"all\":\n//             break;\n//           case \"new\":\n//             filterType = filterType.filter(\n//               (restaurant:any) => restaurant.isNew === true\n//             );\n//             break;\n//           case \"mostPopular\":\n//             filterType = filterType.filter(\n//               (restaurant:any) => restaurant.isPopular === true\n//             );\n//             break;\n//           case \"openNow\":\n//             filterType = filterType.filter(\n//               (restaurant:any) => restaurant.isOpen === true\n//             );\n//             break;\n//           case \"mapView\":\n//             filterType = filterType.filter(\n//               (restaurant:any) => restaurant.isNew === true\n//             );\n//             break;\n//           default:\n//             break;\n//         }\n//         state.restaurants = filterType;\n//       } catch (error) {\n//         console.log(error);\n//       }\n//     },\n//   },\n// });\n\n// export default restaurantsSlice.reducer;\n\n// export const { setRestaurants, restaurantPageFilter } = restaurantsSlice.actions;\n\n// fetch(\"http://localhost:8000/epicure\")\n// .then((response) => response.json())\n// .then((data) => {\n//   console.log(data)\n//   // setStudents(data.studentsData);\n// });\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: { restaurants: [] },\n//   reducers: {\n//     setRestaurants: (state, action) => {\n//         state.restaurants = action.payload;\n//         // switch (state.restaurants){\n//         //     case \"all\":\n//         //         state.value = data.restaurants \n//         //         break;\n//         //     case \"new\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isNew === true); \n//         //         break;\n//         //     case \"mostPopular\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isPopular === true); \n//         //         break;\n//         //     case \"openNow\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isOpen === true); \n//         //         break;\n//         //     case \"mapView\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isNew === true); \n//         //         break;\n\n//         //     default:\n//         //     state.value = state.value;\n//         //   }\n//       }\n//     }\n//   });","map":{"version":3,"names":["createSlice","getData","fetch","then","response","json","data","catch","err","console","log","message","restaurant","restaurantsSlice","name","initialState","value","reducers","restaurantPageFilter","state","action","filterType","payload","filter","isNew","isPopular","isOpen","actions","reducer"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../epicure.json\"\r\n\r\n// const allRestaurant = fetch(\"http://localhost:8000/restaurants\")\r\n//   .then((response) => response.json())\r\n//   .then((data) => {\r\n//     return data;\r\n//   })\r\n//   .catch((err) => {\r\n//     console.log(err.message);\r\n//   });\r\n\r\n// const restaurant: IrestPorps = await allRestaurant;\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: {\r\n//     value: restaurant,\r\n//     filteredValue: restaurant,\r\n//   },\r\n\r\nconst getData = fetch(\"http://localhost:8000/epicure/restaurantsPage\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data;\r\n    })\r\n    .catch((err:any) => {\r\n        console.log(err.message);\r\n    });\r\n\r\nconst restaurant:any = await getData;\r\nconsole.log(restaurant)\r\n\r\nexport const restaurantsSlice = createSlice({\r\n    name: \"restaurants\",\r\n    initialState: {\r\n      value: restaurant,\r\n    },\r\n    reducers: {\r\n      restaurantPageFilter: (state, action) => {\r\n      const filterType = action.payload;\r\n        switch (filterType){\r\n          case \"all\":\r\n              state.value = restaurant\r\n              break;\r\n          case \"new\":\r\n              state.value = restaurant\r\n              state.value = state.value.filter(\r\n                  (restaurant:any) => restaurant.isNew === true); \r\n              break;\r\n          case \"mostPopular\":\r\n              state.value = restaurant\r\n              state.value = state.value.filter(\r\n                  (restaurant:any) => restaurant.isPopular === true); \r\n              break;\r\n          case \"openNow\":\r\n              state.value = restaurant\r\n              state.value = state.value.filter(\r\n                  (restaurant:any) => restaurant.isOpen === true); \r\n              break;\r\n          case \"mapView\":\r\n              state.value =restaurant\r\n              state.value = state.value.filter(\r\n                  (restaurant:any) => restaurant.isNew === true); \r\n              break;\r\n          \r\n          default:\r\n          state.value = state.value;\r\n        }\r\n      }\r\n  }\r\n  })\r\n  \r\n  export const { restaurantPageFilter } = restaurantsSlice.actions;\r\n  export default restaurantsSlice.reducer;\r\n  \r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: { value: [] },\r\n//   reducers: {\r\n//     // setRestaurants: (state, action) => {\r\n//     //   state.restaurants = action.payload;\r\n//     // },\r\n//     restaurantPageFilter: async (state, action) => {\r\n//       try {\r\n//         const response = await fetch(\"http://localhost:8000/epicure\");\r\n//         const dataRest = await response.json();\r\n//         console.log(dataRest)\r\n//         state.value = dataRest\r\n//         let filterType = action.payload;\r\n//         switch (action.payload) {\r\n//           case \"all\":\r\n//             break;\r\n//           case \"new\":\r\n//             filterType = filterType.filter(\r\n//               (restaurant:any) => restaurant.isNew === true\r\n//             );\r\n//             break;\r\n//           case \"mostPopular\":\r\n//             filterType = filterType.filter(\r\n//               (restaurant:any) => restaurant.isPopular === true\r\n//             );\r\n//             break;\r\n//           case \"openNow\":\r\n//             filterType = filterType.filter(\r\n//               (restaurant:any) => restaurant.isOpen === true\r\n//             );\r\n//             break;\r\n//           case \"mapView\":\r\n//             filterType = filterType.filter(\r\n//               (restaurant:any) => restaurant.isNew === true\r\n//             );\r\n//             break;\r\n//           default:\r\n//             break;\r\n//         }\r\n//         state.restaurants = filterType;\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//       }\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export default restaurantsSlice.reducer;\r\n\r\n\r\n// export const { setRestaurants, restaurantPageFilter } = restaurantsSlice.actions;\r\n\r\n// fetch(\"http://localhost:8000/epicure\")\r\n// .then((response) => response.json())\r\n// .then((data) => {\r\n//   console.log(data)\r\n//   // setStudents(data.studentsData);\r\n// });\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: { restaurants: [] },\r\n//   reducers: {\r\n//     setRestaurants: (state, action) => {\r\n//         state.restaurants = action.payload;\r\n//         // switch (state.restaurants){\r\n//         //     case \"all\":\r\n//         //         state.value = data.restaurants \r\n//         //         break;\r\n//         //     case \"new\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isNew === true); \r\n//         //         break;\r\n//         //     case \"mostPopular\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isPopular === true); \r\n//         //         break;\r\n//         //     case \"openNow\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isOpen === true); \r\n//         //         break;\r\n//         //     case \"mapView\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isNew === true); \r\n//         //         break;\r\n            \r\n//         //     default:\r\n//         //     state.value = state.value;\r\n//         //   }\r\n//       }\r\n//     }\r\n//   });\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAGC,KAAK,CAAC,+CAA+C,CAAC,CACjEC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;EACd,OAAOA,IAAI;AACb,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAO,IAAK;EAChBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC;AAC5B,CAAC,CAAC;AAEN,MAAMC,UAAc,GAAG,MAAMX,OAAO;AACpCQ,OAAO,CAACC,GAAG,CAACE,UAAU,CAAC;AAEvB,OAAO,MAAMC,gBAAgB,GAAGb,WAAW,CAAC;EACxCc,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,KAAK,EAAEJ;EACT,CAAC;EACDK,QAAQ,EAAE;IACRC,oBAAoB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACzC,MAAMC,UAAU,GAAGD,MAAM,CAACE,OAAO;MAC/B,QAAQD,UAAU;QAChB,KAAK,KAAK;UACNF,KAAK,CAACH,KAAK,GAAGJ,UAAU;UACxB;QACJ,KAAK,KAAK;UACNO,KAAK,CAACH,KAAK,GAAGJ,UAAU;UACxBO,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC3BX,UAAc,IAAKA,UAAU,CAACY,KAAK,KAAK,IAAI,CAAC;UAClD;QACJ,KAAK,aAAa;UACdL,KAAK,CAACH,KAAK,GAAGJ,UAAU;UACxBO,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC3BX,UAAc,IAAKA,UAAU,CAACa,SAAS,KAAK,IAAI,CAAC;UACtD;QACJ,KAAK,SAAS;UACVN,KAAK,CAACH,KAAK,GAAGJ,UAAU;UACxBO,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC3BX,UAAc,IAAKA,UAAU,CAACc,MAAM,KAAK,IAAI,CAAC;UACnD;QACJ,KAAK,SAAS;UACVP,KAAK,CAACH,KAAK,GAAEJ,UAAU;UACvBO,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC3BX,UAAc,IAAKA,UAAU,CAACY,KAAK,KAAK,IAAI,CAAC;UAClD;QAEJ;UACAL,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK;MAAC;IAE9B;EACJ;AACA,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE;AAAqB,CAAC,GAAGL,gBAAgB,CAACc,OAAO;AAChE,eAAed,gBAAgB,CAACe,OAAO;;AAGzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}