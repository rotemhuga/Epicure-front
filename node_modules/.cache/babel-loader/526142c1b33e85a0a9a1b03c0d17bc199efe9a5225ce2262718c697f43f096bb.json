{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst getChefsData = fetch(\"http://localhost:8000/epicure/chefsPage\").then(response => response.json()).then(data => {\n  return data;\n}).catch(err => {\n  console.log(err.message);\n});\nconst chef = await getChefsData;\nexport const chefsSlice = createSlice({\n  name: \"chefs\",\n  initialState: {\n    value: chef\n  },\n  reducers: {\n    chefsPageFilter: (state, action) => {\n      const chefFilterType = action.payload;\n      switch (chefFilterType) {\n        case \"all\":\n          state.value = chef;\n          break;\n        case \"new\":\n          state.value = chef;\n          state.value = state.value.filter(chef => chef.isNew === true);\n          break;\n        case \"mostViewed\":\n          state.value = chef;\n          state.value = state.value.filter(chef => chef.mostViewed === true);\n          break;\n        default:\n          state.value = state.value;\n      }\n    }\n  }\n});\nexport const {\n  chefsPageFilter\n} = chefsSlice.actions;\nexport default chefsSlice.reducer;","map":{"version":3,"names":["createSlice","getChefsData","fetch","then","response","json","data","catch","err","console","log","message","chef","chefsSlice","name","initialState","value","reducers","chefsPageFilter","state","action","chefFilterType","payload","filter","isNew","mostViewed","actions","reducer"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/front/src/store/slices/chefsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { IchefsValue } from \"../../interfaces\";\r\n\r\nconst getChefsData = fetch(\"http://localhost:8000/epicure/chefsPage\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data;\r\n    })\r\n    .catch((err:any) => {\r\n        console.log(err.message);\r\n    });\r\n\r\nconst chef:any = await getChefsData;\r\n\r\nexport const chefsSlice = createSlice({\r\n  name: \"chefs\",\r\n  initialState: {\r\n    value: chef,\r\n  },\r\n  reducers: {\r\n    chefsPageFilter: (state,action) => {\r\n      const chefFilterType = action.payload;\r\n        switch (chefFilterType){\r\n          case \"all\":\r\n            state.value = chef\r\n            break;\r\n          case \"new\":\r\n            state.value = chef\r\n            state.value = state.value.filter(\r\n              (chef:IchefsValue) => chef.isNew === true);\r\n            break;\r\n          case \"mostViewed\":\r\n            state.value = chef\r\n            state.value = state.value.filter(\r\n              (chef:any) => chef.mostViewed === true);\r\n            break;\r\n\r\n          default:\r\n          state.value = state.value;\r\n        }\r\n      }\r\n  }\r\n});\r\n\r\nexport const { chefsPageFilter } = chefsSlice.actions;\r\nexport default chefsSlice.reducer;\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,YAAY,GAAGC,KAAK,CAAC,yCAAyC,CAAC,CAChEC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;EACd,OAAOA,IAAI;AACb,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAO,IAAK;EAChBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC;AAC5B,CAAC,CAAC;AAEN,MAAMC,IAAQ,GAAG,MAAMX,YAAY;AAEnC,OAAO,MAAMY,UAAU,GAAGb,WAAW,CAAC;EACpCc,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAEJ;EACT,CAAC;EACDK,QAAQ,EAAE;IACRC,eAAe,EAAE,CAACC,KAAK,EAACC,MAAM,KAAK;MACjC,MAAMC,cAAc,GAAGD,MAAM,CAACE,OAAO;MACnC,QAAQD,cAAc;QACpB,KAAK,KAAK;UACRF,KAAK,CAACH,KAAK,GAAGJ,IAAI;UAClB;QACF,KAAK,KAAK;UACRO,KAAK,CAACH,KAAK,GAAGJ,IAAI;UAClBO,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC7BX,IAAgB,IAAKA,IAAI,CAACY,KAAK,KAAK,IAAI,CAAC;UAC5C;QACF,KAAK,YAAY;UACfL,KAAK,CAACH,KAAK,GAAGJ,IAAI;UAClBO,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC7BX,IAAQ,IAAKA,IAAI,CAACa,UAAU,KAAK,IAAI,CAAC;UACzC;QAEF;UACAN,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK;MAAC;IAE9B;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE;AAAgB,CAAC,GAAGL,UAAU,CAACa,OAAO;AACrD,eAAeb,UAAU,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}