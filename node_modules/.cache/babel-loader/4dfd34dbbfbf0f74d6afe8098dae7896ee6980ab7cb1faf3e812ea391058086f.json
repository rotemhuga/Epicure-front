{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../../epicure.json\";\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: data.restaurants\n  },\n  reducers: {\n    reduceName: (state, action) => {\n      const filterType = action.payload;\n      switch (filterType) {\n        case \"all\":\n          state.value = data.restaurants;\n          state.value = state.value.filter(restaurant => restaurant.isNew === true);\n        case \"new\":\n          state.value = data.restaurants;\n          state.value = state.value.filter(restaurant => restaurant.isNew === true);\n        default:\n          state.value = state.value;\n      }\n    }\n  }\n});\nexport const {\n  reduceName\n} = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;\n\n// export const { filterRestaurants } = restaurantsSlice.actions;\n\n// checkIfPopular: state => {\n//     if (state.value[0].isPopular === true) {\n//         // return <CardRestaurant />\n// }\n//       setRestaurants: (state, action) => {\n//         state.value = action.payload;\n//       },\n\n//   reducers: {\n//     filterRestaurants: (state, action) => {\n//       const filterType = action.payload;\n//       switch (filterType) {\n//         case \"all\":\n//           state.value = data.restaurant;\n//           break;\n//         case \"new\":\n//           state.value = data.restaurant;\n//           state.value = state.value.filter(\n//             (restaurant) => restaurant.newRest === true\n//           );\n//           break;\n//         case \"popular\":\n//           state.value = data.restaurant;\n//           state.value = state.value.filter(\n//             (restaurant) => restaurant.popular === true\n//           );\n//           break;\n//         case \"open\":\n//           state.value = state.value.filter(\n//             (restaurant) => restaurant.openNow === true\n//           );\n//           break;\n//         case \"threeRest\":\n//           state.value = state.filteredValue\n//             .filter((restaurant) => restaurant.popular === true)\n//             .slice(0, 3);\n//           break;\n//         default:\n//           state.value = state.value;\n//       }\n//     },\n//   },\n// });\n\n// export const { filterRestaurants } = restaurantsSlice.actions;","map":{"version":3,"names":["createSlice","data","restaurantsSlice","name","initialState","value","restaurants","reducers","reduceName","state","action","filterType","payload","filter","restaurant","isNew","actions","reducer"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../epicure.json\"\r\n\r\nexport const restaurantsSlice = createSlice({\r\n  name: \"restaurants\",\r\n  initialState: {\r\n    value: data.restaurants\r\n  },\r\n  reducers: {\r\n    reduceName: (state, action) => {\r\n    const filterType = action.payload;\r\n      switch (filterType){\r\n        case \"all\":\r\n            state.value = data.restaurants \r\n            state.value = state.value.filter(\r\n                (restaurant) => restaurant.isNew === true); \r\n        case \"new\":\r\n            state.value = data.restaurants \r\n            state.value = state.value.filter(\r\n                (restaurant) => restaurant.isNew === true); \r\n        default:\r\n        state.value = state.value;\r\n      }\r\n    }\r\n}\r\n})\r\n\r\n    export const { reduceName } = restaurantsSlice.actions;\r\n\r\n    export default restaurantsSlice.reducer;\r\n\r\n    // export const { filterRestaurants } = restaurantsSlice.actions;\r\n\r\n    \r\n    // checkIfPopular: state => {\r\n    //     if (state.value[0].isPopular === true) {\r\n    //         // return <CardRestaurant />\r\n    // }\r\n//       setRestaurants: (state, action) => {\r\n//         state.value = action.payload;\r\n//       },\r\n\r\n\r\n//   reducers: {\r\n//     filterRestaurants: (state, action) => {\r\n//       const filterType = action.payload;\r\n//       switch (filterType) {\r\n//         case \"all\":\r\n//           state.value = data.restaurant;\r\n//           break;\r\n//         case \"new\":\r\n//           state.value = data.restaurant;\r\n//           state.value = state.value.filter(\r\n//             (restaurant) => restaurant.newRest === true\r\n//           );\r\n//           break;\r\n//         case \"popular\":\r\n//           state.value = data.restaurant;\r\n//           state.value = state.value.filter(\r\n//             (restaurant) => restaurant.popular === true\r\n//           );\r\n//           break;\r\n//         case \"open\":\r\n//           state.value = state.value.filter(\r\n//             (restaurant) => restaurant.openNow === true\r\n//           );\r\n//           break;\r\n//         case \"threeRest\":\r\n//           state.value = state.filteredValue\r\n//             .filter((restaurant) => restaurant.popular === true)\r\n//             .slice(0, 3);\r\n//           break;\r\n//         default:\r\n//           state.value = state.value;\r\n//       }\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export const { filterRestaurants } = restaurantsSlice.actions;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,oBAAoB;AAErC,OAAO,MAAMC,gBAAgB,GAAGF,WAAW,CAAC;EAC1CG,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,KAAK,EAAEJ,IAAI,CAACK;EACd,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAU,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/B,MAAMC,UAAU,GAAGD,MAAM,CAACE,OAAO;MAC/B,QAAQD,UAAU;QAChB,KAAK,KAAK;UACNF,KAAK,CAACJ,KAAK,GAAGJ,IAAI,CAACK,WAAW;UAC9BG,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAC3BC,UAAU,IAAKA,UAAU,CAACC,KAAK,KAAK,IAAI,CAAC;QAClD,KAAK,KAAK;UACNN,KAAK,CAACJ,KAAK,GAAGJ,IAAI,CAACK,WAAW;UAC9BG,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAC3BC,UAAU,IAAKA,UAAU,CAACC,KAAK,KAAK,IAAI,CAAC;QAClD;UACAN,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK;MAAC;IAE9B;EACJ;AACA,CAAC,CAAC;AAEE,OAAO,MAAM;EAAEG;AAAW,CAAC,GAAGN,gBAAgB,CAACc,OAAO;AAEtD,eAAed,gBAAgB,CAACe,OAAO;;AAEvC;;AAGA;AACA;AACA;AACA;AACJ;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}