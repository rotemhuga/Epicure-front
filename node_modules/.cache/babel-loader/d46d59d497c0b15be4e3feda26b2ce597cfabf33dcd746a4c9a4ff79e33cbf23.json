{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: []\n  },\n  reducers: {\n    // setRestaurants: (state, action) => {\n    //   state.restaurants = action.payload;\n    // },\n    restaurantPageFilter: async (state, action) => {\n      try {\n        const response = await fetch(\"http://localhost:8000/epicure\");\n        const dataRest = await response.json();\n        console.log(dataRest);\n        state.value = dataRest;\n        let filterType = action.payload;\n        switch (filterType) {\n          case \"all\":\n            break;\n          case \"new\":\n            filterType = dataRest.filter(restaurant => restaurant.isNew === true);\n            break;\n          case \"mostPopular\":\n            filterType = filterType.filter(restaurant => restaurant.isPopular === true);\n            break;\n          case \"openNow\":\n            filterType = filterType.filter(restaurant => restaurant.isOpen === true);\n            break;\n          case \"mapView\":\n            filterType = filterType.filter(restaurant => restaurant.isNew === true);\n            break;\n          default:\n            break;\n        }\n        state.restaurants = filterType;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n});\nexport default restaurantsSlice.reducer;\nexport const {\n  setRestaurants,\n  restaurantPageFilter\n} = restaurantsSlice.actions;\n\n// fetch(\"http://localhost:8000/epicure\")\n// .then((response) => response.json())\n// .then((data) => {\n//   console.log(data)\n//   // setStudents(data.studentsData);\n// });\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: { restaurants: [] },\n//   reducers: {\n//     setRestaurants: (state, action) => {\n//         state.restaurants = action.payload;\n//         // switch (state.restaurants){\n//         //     case \"all\":\n//         //         state.value = data.restaurants \n//         //         break;\n//         //     case \"new\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isNew === true); \n//         //         break;\n//         //     case \"mostPopular\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isPopular === true); \n//         //         break;\n//         //     case \"openNow\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isOpen === true); \n//         //         break;\n//         //     case \"mapView\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isNew === true); \n//         //         break;\n\n//         //     default:\n//         //     state.value = state.value;\n//         //   }\n//       }\n//     }\n//   });\n\n// export default restaurantsSlice.reducer;\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: {\n//     value: data.restaurants,\n//   },\n//   reducers: {\n//     restaurantPageFilter: (state, action) => {\n//     const filterType = action.payload;\n//       switch (filterType){\n//         case \"all\":\n//             state.value = data.restaurants \n//             break;\n//         case \"new\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isNew === true); \n//             break;\n//         case \"mostPopular\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isPopular === true); \n//             break;\n//         case \"openNow\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isOpen === true); \n//             break;\n//         case \"mapView\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isNew === true); \n//             break;\n\n//         default:\n//         state.value = state.value;\n//       }\n//     }\n// }\n// })\n\n// export const { restaurantPageFilter } = restaurantsSlice.actions;\n// export default restaurantsSlice.reducer;","map":{"version":3,"names":["createSlice","restaurantsSlice","name","initialState","value","reducers","restaurantPageFilter","state","action","response","fetch","dataRest","json","console","log","filterType","payload","filter","restaurant","isNew","isPopular","isOpen","restaurants","error","reducer","setRestaurants","actions"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const restaurantsSlice = createSlice({\r\n  name: \"restaurants\",\r\n  initialState: { value: [] },\r\n  reducers: {\r\n    // setRestaurants: (state, action) => {\r\n    //   state.restaurants = action.payload;\r\n    // },\r\n    restaurantPageFilter: async (state, action) => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8000/epicure\");\r\n        const dataRest = await response.json();\r\n        console.log(dataRest)\r\n        state.value = dataRest\r\n        let filterType = action.payload;\r\n        switch (filterType) {\r\n          case \"all\":\r\n            break;\r\n          case \"new\":\r\n            filterType = dataRest.filter(\r\n              (restaurant:any) => restaurant.isNew === true\r\n            );\r\n            break;\r\n          case \"mostPopular\":\r\n            filterType = filterType.filter(\r\n              (restaurant:any) => restaurant.isPopular === true\r\n            );\r\n            break;\r\n          case \"openNow\":\r\n            filterType = filterType.filter(\r\n              (restaurant:any) => restaurant.isOpen === true\r\n            );\r\n            break;\r\n          case \"mapView\":\r\n            filterType = filterType.filter(\r\n              (restaurant:any) => restaurant.isNew === true\r\n            );\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        state.restaurants = filterType;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport default restaurantsSlice.reducer;\r\n\r\n\r\nexport const { setRestaurants, restaurantPageFilter } = restaurantsSlice.actions;\r\n\r\n// fetch(\"http://localhost:8000/epicure\")\r\n// .then((response) => response.json())\r\n// .then((data) => {\r\n//   console.log(data)\r\n//   // setStudents(data.studentsData);\r\n// });\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: { restaurants: [] },\r\n//   reducers: {\r\n//     setRestaurants: (state, action) => {\r\n//         state.restaurants = action.payload;\r\n//         // switch (state.restaurants){\r\n//         //     case \"all\":\r\n//         //         state.value = data.restaurants \r\n//         //         break;\r\n//         //     case \"new\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isNew === true); \r\n//         //         break;\r\n//         //     case \"mostPopular\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isPopular === true); \r\n//         //         break;\r\n//         //     case \"openNow\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isOpen === true); \r\n//         //         break;\r\n//         //     case \"mapView\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isNew === true); \r\n//         //         break;\r\n            \r\n//         //     default:\r\n//         //     state.value = state.value;\r\n//         //   }\r\n//       }\r\n//     }\r\n//   });\r\n\r\n\r\n\r\n// export default restaurantsSlice.reducer;\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: {\r\n//     value: data.restaurants,\r\n//   },\r\n//   reducers: {\r\n//     restaurantPageFilter: (state, action) => {\r\n//     const filterType = action.payload;\r\n//       switch (filterType){\r\n//         case \"all\":\r\n//             state.value = data.restaurants \r\n//             break;\r\n//         case \"new\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isNew === true); \r\n//             break;\r\n//         case \"mostPopular\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isPopular === true); \r\n//             break;\r\n//         case \"openNow\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isOpen === true); \r\n//             break;\r\n//         case \"mapView\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isNew === true); \r\n//             break;\r\n        \r\n//         default:\r\n//         state.value = state.value;\r\n//       }\r\n//     }\r\n// }\r\n// })\r\n\r\n// export const { restaurantPageFilter } = restaurantsSlice.actions;\r\n// export default restaurantsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,gBAAgB,GAAGD,WAAW,CAAC;EAC1CE,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC;EAC3BC,QAAQ,EAAE;IACR;IACA;IACA;IACAC,oBAAoB,EAAE,OAAOC,KAAK,EAAEC,MAAM,KAAK;MAC7C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;QAC7D,MAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QACtCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;QACrBJ,KAAK,CAACH,KAAK,GAAGO,QAAQ;QACtB,IAAII,UAAU,GAAGP,MAAM,CAACQ,OAAO;QAC/B,QAAQD,UAAU;UAChB,KAAK,KAAK;YACR;UACF,KAAK,KAAK;YACRA,UAAU,GAAGJ,QAAQ,CAACM,MAAM,CACzBC,UAAc,IAAKA,UAAU,CAACC,KAAK,KAAK,IAAI,CAC9C;YACD;UACF,KAAK,aAAa;YAChBJ,UAAU,GAAGA,UAAU,CAACE,MAAM,CAC3BC,UAAc,IAAKA,UAAU,CAACE,SAAS,KAAK,IAAI,CAClD;YACD;UACF,KAAK,SAAS;YACZL,UAAU,GAAGA,UAAU,CAACE,MAAM,CAC3BC,UAAc,IAAKA,UAAU,CAACG,MAAM,KAAK,IAAI,CAC/C;YACD;UACF,KAAK,SAAS;YACZN,UAAU,GAAGA,UAAU,CAACE,MAAM,CAC3BC,UAAc,IAAKA,UAAU,CAACC,KAAK,KAAK,IAAI,CAC9C;YACD;UACF;YACE;QAAM;QAEVZ,KAAK,CAACe,WAAW,GAAGP,UAAU;MAChC,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;MACpB;IACF;EACF;AACF,CAAC,CAAC;AAEF,eAAetB,gBAAgB,CAACuB,OAAO;AAGvC,OAAO,MAAM;EAAEC,cAAc;EAAEnB;AAAqB,CAAC,GAAGL,gBAAgB,CAACyB,OAAO;;AAEhF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}