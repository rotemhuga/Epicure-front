{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst getData = fetch(\"http://localhost:8000/epicure\").then(response => response.json()).then(data => {\n  return data;\n});\nlet x = [];\nconst allRest = () => {\n  getData.then(a => {\n    console.log(a);\n    x = a;\n  });\n};\nallRest();\nconsole.log(x);\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: allRest()\n  },\n  reducers: {\n    restaurantPageFilter: (state, action) => {\n      const filterType = action.payload;\n      switch (filterType) {\n        case \"all\":\n          state.value = allRest();\n          break;\n        //   case \"new\":\n        //       state.value = allRest()\n        //       state.value = state.value.filter(\n        //           (restaurant:any) => restaurant.isNew === true); \n        //       break;\n        //   case \"mostPopular\":\n        //       state.value = allRest()\n        //       state.value = state.value.filter(\n        //           (restaurant:any) => restaurant.isPopular === true); \n        //       break;\n        //   case \"openNow\":\n        //       state.value = allRest()\n        //       state.value = state.value.filter(\n        //           (restaurant:any) => restaurant.isOpen === true); \n        //       break;\n        //   case \"mapView\":\n        //       state.value =allRest()\n        //       state.value = state.value.filter(\n        //           (restaurant:any) => restaurant.isNew === true); \n        //       break;\n\n        default:\n          state.value = state.value;\n      }\n    }\n  }\n});\nexport const {\n  restaurantPageFilter\n} = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: { value: [] },\n//   reducers: {\n//     // setRestaurants: (state, action) => {\n//     //   state.restaurants = action.payload;\n//     // },\n//     restaurantPageFilter: async (state, action) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/epicure\");\n//         const dataRest = await response.json();\n//         console.log(dataRest)\n//         state.value = dataRest\n//         let filterType = action.payload;\n//         switch (action.payload) {\n//           case \"all\":\n//             break;\n//           case \"new\":\n//             filterType = filterType.filter(\n//               (restaurant:any) => restaurant.isNew === true\n//             );\n//             break;\n//           case \"mostPopular\":\n//             filterType = filterType.filter(\n//               (restaurant:any) => restaurant.isPopular === true\n//             );\n//             break;\n//           case \"openNow\":\n//             filterType = filterType.filter(\n//               (restaurant:any) => restaurant.isOpen === true\n//             );\n//             break;\n//           case \"mapView\":\n//             filterType = filterType.filter(\n//               (restaurant:any) => restaurant.isNew === true\n//             );\n//             break;\n//           default:\n//             break;\n//         }\n//         state.restaurants = filterType;\n//       } catch (error) {\n//         console.log(error);\n//       }\n//     },\n//   },\n// });\n\n// export default restaurantsSlice.reducer;\n\n// export const { setRestaurants, restaurantPageFilter } = restaurantsSlice.actions;\n\n// fetch(\"http://localhost:8000/epicure\")\n// .then((response) => response.json())\n// .then((data) => {\n//   console.log(data)\n//   // setStudents(data.studentsData);\n// });\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: { restaurants: [] },\n//   reducers: {\n//     setRestaurants: (state, action) => {\n//         state.restaurants = action.payload;\n//         // switch (state.restaurants){\n//         //     case \"all\":\n//         //         state.value = data.restaurants \n//         //         break;\n//         //     case \"new\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isNew === true); \n//         //         break;\n//         //     case \"mostPopular\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isPopular === true); \n//         //         break;\n//         //     case \"openNow\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isOpen === true); \n//         //         break;\n//         //     case \"mapView\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isNew === true); \n//         //         break;\n\n//         //     default:\n//         //     state.value = state.value;\n//         //   }\n//       }\n//     }\n//   });","map":{"version":3,"names":["createSlice","getData","fetch","then","response","json","data","x","allRest","a","console","log","restaurantsSlice","name","initialState","value","reducers","restaurantPageFilter","state","action","filterType","payload","actions","reducer"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../epicure.json\"\r\n\r\nconst getData =  fetch(\"http://localhost:8000/epicure\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n        return data\r\n});\r\nlet x:any=[]\r\nconst allRest = () => {\r\n    getData.then((a) => {\r\n      console.log(a);\r\n      x=a;\r\n    });\r\n  };\r\n  allRest()\r\n  console.log(x);\r\n\r\nexport const restaurantsSlice = createSlice({\r\n    name: \"restaurants\",\r\n    initialState: {\r\n      value: allRest(),\r\n    },\r\n    reducers: {\r\n      restaurantPageFilter: (state, action) => {\r\n      const filterType = action.payload;\r\n        switch (filterType){\r\n          case \"all\":\r\n              state.value = allRest() \r\n              break;\r\n        //   case \"new\":\r\n        //       state.value = allRest()\r\n        //       state.value = state.value.filter(\r\n        //           (restaurant:any) => restaurant.isNew === true); \r\n        //       break;\r\n        //   case \"mostPopular\":\r\n        //       state.value = allRest()\r\n        //       state.value = state.value.filter(\r\n        //           (restaurant:any) => restaurant.isPopular === true); \r\n        //       break;\r\n        //   case \"openNow\":\r\n        //       state.value = allRest()\r\n        //       state.value = state.value.filter(\r\n        //           (restaurant:any) => restaurant.isOpen === true); \r\n        //       break;\r\n        //   case \"mapView\":\r\n        //       state.value =allRest()\r\n        //       state.value = state.value.filter(\r\n        //           (restaurant:any) => restaurant.isNew === true); \r\n        //       break;\r\n          \r\n          default:\r\n          state.value = state.value;\r\n        }\r\n      }\r\n  }\r\n  })\r\n  \r\n  export const { restaurantPageFilter } = restaurantsSlice.actions;\r\n  export default restaurantsSlice.reducer;\r\n  \r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: { value: [] },\r\n//   reducers: {\r\n//     // setRestaurants: (state, action) => {\r\n//     //   state.restaurants = action.payload;\r\n//     // },\r\n//     restaurantPageFilter: async (state, action) => {\r\n//       try {\r\n//         const response = await fetch(\"http://localhost:8000/epicure\");\r\n//         const dataRest = await response.json();\r\n//         console.log(dataRest)\r\n//         state.value = dataRest\r\n//         let filterType = action.payload;\r\n//         switch (action.payload) {\r\n//           case \"all\":\r\n//             break;\r\n//           case \"new\":\r\n//             filterType = filterType.filter(\r\n//               (restaurant:any) => restaurant.isNew === true\r\n//             );\r\n//             break;\r\n//           case \"mostPopular\":\r\n//             filterType = filterType.filter(\r\n//               (restaurant:any) => restaurant.isPopular === true\r\n//             );\r\n//             break;\r\n//           case \"openNow\":\r\n//             filterType = filterType.filter(\r\n//               (restaurant:any) => restaurant.isOpen === true\r\n//             );\r\n//             break;\r\n//           case \"mapView\":\r\n//             filterType = filterType.filter(\r\n//               (restaurant:any) => restaurant.isNew === true\r\n//             );\r\n//             break;\r\n//           default:\r\n//             break;\r\n//         }\r\n//         state.restaurants = filterType;\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//       }\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export default restaurantsSlice.reducer;\r\n\r\n\r\n// export const { setRestaurants, restaurantPageFilter } = restaurantsSlice.actions;\r\n\r\n// fetch(\"http://localhost:8000/epicure\")\r\n// .then((response) => response.json())\r\n// .then((data) => {\r\n//   console.log(data)\r\n//   // setStudents(data.studentsData);\r\n// });\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: { restaurants: [] },\r\n//   reducers: {\r\n//     setRestaurants: (state, action) => {\r\n//         state.restaurants = action.payload;\r\n//         // switch (state.restaurants){\r\n//         //     case \"all\":\r\n//         //         state.value = data.restaurants \r\n//         //         break;\r\n//         //     case \"new\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isNew === true); \r\n//         //         break;\r\n//         //     case \"mostPopular\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isPopular === true); \r\n//         //         break;\r\n//         //     case \"openNow\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isOpen === true); \r\n//         //         break;\r\n//         //     case \"mapView\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isNew === true); \r\n//         //         break;\r\n            \r\n//         //     default:\r\n//         //     state.value = state.value;\r\n//         //   }\r\n//       }\r\n//     }\r\n//   });\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,OAAO,GAAIC,KAAK,CAAC,+BAA+B,CAAC,CAC9CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;EAChB,OAAOA,IAAI;AACnB,CAAC,CAAC;AACF,IAAIC,CAAK,GAAC,EAAE;AACZ,MAAMC,OAAO,GAAG,MAAM;EAClBP,OAAO,CAACE,IAAI,CAAEM,CAAC,IAAK;IAClBC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IACdF,CAAC,GAACE,CAAC;EACL,CAAC,CAAC;AACJ,CAAC;AACDD,OAAO,EAAE;AACTE,OAAO,CAACC,GAAG,CAACJ,CAAC,CAAC;AAEhB,OAAO,MAAMK,gBAAgB,GAAGZ,WAAW,CAAC;EACxCa,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,KAAK,EAAEP,OAAO;EAChB,CAAC;EACDQ,QAAQ,EAAE;IACRC,oBAAoB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACzC,MAAMC,UAAU,GAAGD,MAAM,CAACE,OAAO;MAC/B,QAAQD,UAAU;QAChB,KAAK,KAAK;UACNF,KAAK,CAACH,KAAK,GAAGP,OAAO,EAAE;UACvB;QACN;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEE;UACAU,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK;MAAC;IAE9B;EACJ;AACA,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE;AAAqB,CAAC,GAAGL,gBAAgB,CAACU,OAAO;AAChE,eAAeV,gBAAgB,CAACW,OAAO;;AAGzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}