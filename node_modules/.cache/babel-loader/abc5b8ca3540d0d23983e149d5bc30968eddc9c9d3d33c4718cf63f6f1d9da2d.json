{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst getData = fetch(\"http://localhost:8000/epicure/restaurantsPage\").then(response => response.json()).then(data => {\n  return data;\n}).catch(err => {\n  console.log(err.message);\n});\nconst restaurant = await getData;\nconst date = new Date();\nconst showTime = date.getHours();\nconst checkOpen = () => {\n  if (showTime >= restaurant.openHour && showTime <= restaurant.closeHour) {\n    return \"open now\";\n  } else {}\n};\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: restaurant\n  },\n  reducers: {\n    restaurantPageFilter: (state, action) => {\n      const filterType = action.payload;\n      switch (filterType) {\n        case \"all\":\n          state.value = restaurant;\n          break;\n        case \"new\":\n          state.value = restaurant;\n          state.value = state.value.filter(restaurant => restaurant.isNew === true);\n          break;\n        case \"mostPopular\":\n          state.value = restaurant;\n          state.value = state.value.filter(restaurant => restaurant.isPopular === true);\n          break;\n        case \"openNow\":\n          state.value = restaurant;\n          state.value = state.value.filter(restaurant => restaurant.isOpen === true);\n          break;\n        case \"mapView\":\n          state.value = restaurant;\n          state.value = state.value.filter(restaurant => restaurant.isNew === true);\n          break;\n        default:\n          state.value = state.value;\n      }\n    }\n  }\n});\nexport const {\n  restaurantPageFilter\n} = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;","map":{"version":3,"names":["createSlice","getData","fetch","then","response","json","data","catch","err","console","log","message","restaurant","date","Date","showTime","getHours","checkOpen","openHour","closeHour","restaurantsSlice","name","initialState","value","reducers","restaurantPageFilter","state","action","filterType","payload","filter","isNew","isPopular","isOpen","actions","reducer"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { IrestaurantsValue } from \"../../interfaces\";\r\n\r\nconst getData = fetch(\"http://localhost:8000/epicure/restaurantsPage\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data;\r\n    })\r\n    .catch((err:any) => {\r\n        console.log(err.message);\r\n    });\r\n\r\nconst restaurant:any = await getData;\r\nconst date = new Date();\r\nconst showTime = date.getHours();\r\nconst checkOpen = () => {\r\n    if (showTime>= restaurant.openHour && showTime <= restaurant.closeHour){\r\n        return \"open now\"\r\n    } else {\r\n        \r\n    }\r\n}\r\n\r\nexport const restaurantsSlice = createSlice({\r\n    name: \"restaurants\",\r\n    initialState: {\r\n      value: restaurant,\r\n    },\r\n    reducers: {\r\n      restaurantPageFilter: (state, action) => {\r\n      const filterType = action.payload;\r\n        switch (filterType){\r\n          case \"all\":\r\n              state.value = restaurant\r\n              break;\r\n          case \"new\":\r\n              state.value = restaurant\r\n              state.value = state.value.filter(\r\n                  (restaurant:IrestaurantsValue) => restaurant.isNew === true); \r\n              break;\r\n          case \"mostPopular\":\r\n              state.value = restaurant\r\n              state.value = state.value.filter(\r\n                  (restaurant:IrestaurantsValue) => restaurant.isPopular === true); \r\n              break;\r\n          case \"openNow\":\r\n              state.value = restaurant\r\n              state.value = state.value.filter(\r\n                  (restaurant:any) => restaurant.isOpen === true); \r\n              break;\r\n          case \"mapView\":\r\n              state.value =restaurant\r\n              state.value = state.value.filter(\r\n                  (restaurant:IrestaurantsValue) => restaurant.isNew === true); \r\n              break;\r\n          \r\n          default:\r\n          state.value = state.value;\r\n        }\r\n      }\r\n  }\r\n  })\r\n  \r\n  export const { restaurantPageFilter } = restaurantsSlice.actions;\r\n  export default restaurantsSlice.reducer;\r\n  \r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,OAAO,GAAGC,KAAK,CAAC,+CAA+C,CAAC,CACjEC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;EACd,OAAOA,IAAI;AACb,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAO,IAAK;EAChBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC;AAC5B,CAAC,CAAC;AAEN,MAAMC,UAAc,GAAG,MAAMX,OAAO;AACpC,MAAMY,IAAI,GAAG,IAAIC,IAAI,EAAE;AACvB,MAAMC,QAAQ,GAAGF,IAAI,CAACG,QAAQ,EAAE;AAChC,MAAMC,SAAS,GAAG,MAAM;EACpB,IAAIF,QAAQ,IAAGH,UAAU,CAACM,QAAQ,IAAIH,QAAQ,IAAIH,UAAU,CAACO,SAAS,EAAC;IACnE,OAAO,UAAU;EACrB,CAAC,MAAM,CAEP;AACJ,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGpB,WAAW,CAAC;EACxCqB,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,KAAK,EAAEX;EACT,CAAC;EACDY,QAAQ,EAAE;IACRC,oBAAoB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACzC,MAAMC,UAAU,GAAGD,MAAM,CAACE,OAAO;MAC/B,QAAQD,UAAU;QAChB,KAAK,KAAK;UACNF,KAAK,CAACH,KAAK,GAAGX,UAAU;UACxB;QACJ,KAAK,KAAK;UACNc,KAAK,CAACH,KAAK,GAAGX,UAAU;UACxBc,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC3BlB,UAA4B,IAAKA,UAAU,CAACmB,KAAK,KAAK,IAAI,CAAC;UAChE;QACJ,KAAK,aAAa;UACdL,KAAK,CAACH,KAAK,GAAGX,UAAU;UACxBc,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC3BlB,UAA4B,IAAKA,UAAU,CAACoB,SAAS,KAAK,IAAI,CAAC;UACpE;QACJ,KAAK,SAAS;UACVN,KAAK,CAACH,KAAK,GAAGX,UAAU;UACxBc,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC3BlB,UAAc,IAAKA,UAAU,CAACqB,MAAM,KAAK,IAAI,CAAC;UACnD;QACJ,KAAK,SAAS;UACVP,KAAK,CAACH,KAAK,GAAEX,UAAU;UACvBc,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACO,MAAM,CAC3BlB,UAA4B,IAAKA,UAAU,CAACmB,KAAK,KAAK,IAAI,CAAC;UAChE;QAEJ;UACAL,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK;MAAC;IAE9B;EACJ;AACA,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE;AAAqB,CAAC,GAAGL,gBAAgB,CAACc,OAAO;AAChE,eAAed,gBAAgB,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}