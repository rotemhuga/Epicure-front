{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../../epicure.json\";\n// fetch(\"http://localhost:8000/epicure\")\n// .then((response) => response.json())\n// .then((data) => {\n//   console.log(data)\n//   // setStudents(data.studentsData);\n// });\n\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    restaurants: []\n  },\n  reducers: {\n    setRestaurants: (state, action) => {\n      state.restaurants = action.payload;\n    }\n  }\n});\nexport const fetchRestaurants = () => async ispatch => {\n  try {\n    const response = await fetch(\"http://localhost:8000/epicure\");\n    const data = await response.json();\n    dispatch(setRestaurants(data));\n  } catch (error) {\n    console.log(error);\n  }\n};\nrestaurantPageFilter: (state, action) => {\n  const filterType = action.payload;\n  switch (filterType) {\n    case \"all\":\n      state.value = data.restaurants;\n      break;\n    // case \"new\":\n    //     state.value = data.restaurants \n    //     state.value = state.value.filter(\n    //         (restaurant) => restaurant.isNew === true); \n    //     break;\n    // case \"mostPopular\":\n    //     state.value = data.restaurants \n    //     state.value = state.value.filter(\n    //         (restaurant) => restaurant.isPopular === true); \n    //     break;\n    // case \"openNow\":\n    //     state.value = data.restaurants \n    //     state.value = state.value.filter(\n    //         (restaurant) => restaurant.isOpen === true); \n    //     break;\n    // case \"mapView\":\n    //     state.value = data.restaurants \n    //     state.value = state.value.filter(\n    //         (restaurant) => restaurant.isNew === true); \n    //     break;\n\n    default:\n      state.value = state.value;\n  }\n};\n\n// const userSlice = createSlice({\n//   name: 'users',\n//   initialState: { users: [] },\n//   reducers: {\n//     setUsers: (state, action) => {\n//       state.users = action.payload;\n//     }\n//   }\n// });\n\nexport const {\n  setUsers\n} = userSlice.actions;\nexport const fetchUsers = () => async dispatch => {\n  try {\n    const response = await fetch('/users');\n    const data = await response.json();\n    dispatch(setUsers(data));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const {\n  restaurantPageFilter\n} = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: {\n//     value: data.restaurants,\n//   },\n//   reducers: {\n//     restaurantPageFilter: (state, action) => {\n//     const filterType = action.payload;\n//       switch (filterType){\n//         case \"all\":\n//             state.value = data.restaurants \n//             break;\n//         case \"new\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isNew === true); \n//             break;\n//         case \"mostPopular\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isPopular === true); \n//             break;\n//         case \"openNow\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isOpen === true); \n//             break;\n//         case \"mapView\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isNew === true); \n//             break;\n\n//         default:\n//         state.value = state.value;\n//       }\n//     }\n// }\n// })\n\n// export const { restaurantPageFilter } = restaurantsSlice.actions;\n// export default restaurantsSlice.reducer;","map":{"version":3,"names":["createSlice","data","restaurantsSlice","name","initialState","restaurants","reducers","setRestaurants","state","action","payload","fetchRestaurants","ispatch","response","fetch","json","dispatch","error","console","log","restaurantPageFilter","filterType","value","setUsers","userSlice","actions","fetchUsers","reducer"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../epicure.json\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n// fetch(\"http://localhost:8000/epicure\")\r\n// .then((response) => response.json())\r\n// .then((data) => {\r\n//   console.log(data)\r\n//   // setStudents(data.studentsData);\r\n// });\r\n\r\nexport const restaurantsSlice = createSlice({\r\n  name: \"restaurants\",\r\n  initialState: { restaurants: [] },\r\n  reducers: {\r\n    setRestaurants: (state, action) => {\r\n        state.restaurants = action.payload;\r\n      }\r\n    }\r\n  });\r\nexport const fetchRestaurants = () => async ispatch => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:8000/epicure\");\r\n        const data = await response.json();\r\n        dispatch(setRestaurants(data));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n    };\r\n    restaurantPageFilter: (state, action) => {\r\n    const filterType = action.payload;\r\n      switch (filterType){\r\n        case \"all\":\r\n            state.value = data.restaurants \r\n            break;\r\n        // case \"new\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isNew === true); \r\n        //     break;\r\n        // case \"mostPopular\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isPopular === true); \r\n        //     break;\r\n        // case \"openNow\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isOpen === true); \r\n        //     break;\r\n        // case \"mapView\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isNew === true); \r\n        //     break;\r\n        \r\n        default:\r\n        state.value = state.value;\r\n      }\r\n    }\r\n\r\n// const userSlice = createSlice({\r\n//   name: 'users',\r\n//   initialState: { users: [] },\r\n//   reducers: {\r\n//     setUsers: (state, action) => {\r\n//       state.users = action.payload;\r\n//     }\r\n//   }\r\n// });\r\n\r\nexport const { setUsers } = userSlice.actions;\r\n\r\nexport const fetchUsers = () => async dispatch => {\r\n  try {\r\n    const response = await fetch('/users');\r\n    const data = await response.json();\r\n    dispatch(setUsers(data));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\nexport const { restaurantPageFilter } = restaurantsSlice.actions;\r\nexport default restaurantsSlice.reducer;\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: {\r\n//     value: data.restaurants,\r\n//   },\r\n//   reducers: {\r\n//     restaurantPageFilter: (state, action) => {\r\n//     const filterType = action.payload;\r\n//       switch (filterType){\r\n//         case \"all\":\r\n//             state.value = data.restaurants \r\n//             break;\r\n//         case \"new\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isNew === true); \r\n//             break;\r\n//         case \"mostPopular\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isPopular === true); \r\n//             break;\r\n//         case \"openNow\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isOpen === true); \r\n//             break;\r\n//         case \"mapView\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isNew === true); \r\n//             break;\r\n        \r\n//         default:\r\n//         state.value = state.value;\r\n//       }\r\n//     }\r\n// }\r\n// })\r\n\r\n// export const { restaurantPageFilter } = restaurantsSlice.actions;\r\n// export default restaurantsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,oBAAoB;AAGrC;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAGF,WAAW,CAAC;EAC1CG,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IAAEC,WAAW,EAAE;EAAG,CAAC;EACjCC,QAAQ,EAAE;IACRC,cAAc,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACH,WAAW,GAAGI,MAAM,CAACC,OAAO;IACpC;EACF;AACF,CAAC,CAAC;AACJ,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAMC,OAAO,IAAI;EACnD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;IAC7D,MAAMb,IAAI,GAAG,MAAMY,QAAQ,CAACE,IAAI,EAAE;IAClCC,QAAQ,CAACT,cAAc,CAACN,IAAI,CAAC,CAAC;EAClC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACA,CAAC;AACDG,oBAAoB,EAAE,CAACZ,KAAK,EAAEC,MAAM,KAAK;EACzC,MAAMY,UAAU,GAAGZ,MAAM,CAACC,OAAO;EAC/B,QAAQW,UAAU;IAChB,KAAK,KAAK;MACNb,KAAK,CAACc,KAAK,GAAGrB,IAAI,CAACI,WAAW;MAC9B;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;MACAG,KAAK,CAACc,KAAK,GAAGd,KAAK,CAACc,KAAK;EAAC;AAE9B,CAAC;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM;EAAEC;AAAS,CAAC,GAAGC,SAAS,CAACC,OAAO;AAE7C,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAMV,QAAQ,IAAI;EAChD,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAC,QAAQ,CAAC;IACtC,MAAMb,IAAI,GAAG,MAAMY,QAAQ,CAACE,IAAI,EAAE;IAClCC,QAAQ,CAACO,QAAQ,CAACtB,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAGD,OAAO,MAAM;EAAEG;AAAqB,CAAC,GAAGlB,gBAAgB,CAACuB,OAAO;AAChE,eAAevB,gBAAgB,CAACyB,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}