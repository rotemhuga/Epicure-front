{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    restaurants: []\n  },\n  reducers: {\n    setRestaurants: (state, action) => {\n      state.restaurants = action.payload;\n    }\n  }\n});\nexport const {\n  setRestaurants\n} = restaurantsSlice.actions;\n\n// Define an async thunk to fetch data from the server\nexport const fetchRestaurants = () => async dispatch => {\n  try {\n    const response = await fetch(\"http://localhost:8000/epicure\");\n    const data = await response.json();\n    let filterType = data.restaurants;\n    switch (filterType) {\n      case \"all\":\n        filterType = data.restaurants;\n        break;\n      case \"new\":\n        filterType = filterType.filter(restaurant => restaurant.isNew === true);\n        break;\n      case \"mostPopular\":\n        filterType = filterType.filter(restaurant => restaurant.isPopular === true);\n        break;\n      case \"openNow\":\n        filterType = filterType.filter(restaurant => restaurant.isOpen === true);\n        break;\n      case \"mapView\":\n        filterType = filterType.filter(restaurant => restaurant.isNew === true);\n        break;\n      default:\n        break;\n    }\n    dispatch(setRestaurants(filterType));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// fetch(\"http://localhost:8000/epicure\")\n// .then((response) => response.json())\n// .then((data) => {\n//   console.log(data)\n//   // setStudents(data.studentsData);\n// });\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: { restaurants: [] },\n//   reducers: {\n//     setRestaurants: (state, action) => {\n//         state.restaurants = action.payload;\n//         // switch (state.restaurants){\n//         //     case \"all\":\n//         //         state.value = data.restaurants \n//         //         break;\n//         //     case \"new\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isNew === true); \n//         //         break;\n//         //     case \"mostPopular\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isPopular === true); \n//         //         break;\n//         //     case \"openNow\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isOpen === true); \n//         //         break;\n//         //     case \"mapView\":\n//         //         state.value = data.restaurants \n//         //         state.value = state.value.filter(\n//         //             (restaurant) => restaurant.isNew === true); \n//         //         break;\n\n//         //     default:\n//         //     state.value = state.value;\n//         //   }\n//       }\n//     }\n//   });\n\n// export const { setRestaurants } = restaurantsSlice.actions; \n\n// export const fetchRestaurants = () => async (dispatch: (arg0: { payload: any; type: \"restaurants/setRestaurants\"; }) => void) => {\n//     try {\n//         const response = await fetch(\"http://localhost:8000/epicure\");\n//         const data = await response.json();\n//         dispatch(setRestaurants(data));\n//     } catch (error) {\n//         console.log(error);\n//     }\n//     };\n// restaurantPageFilter: (state, action) => {\n// const filterType = action.payload;\n//   switch (filterType){\n//     case \"all\":\n//         state.value = data.restaurants \n//         break;\n// case \"new\":\n//     state.value = data.restaurants \n//     state.value = state.value.filter(\n//         (restaurant) => restaurant.isNew === true); \n//     break;\n// case \"mostPopular\":\n//     state.value = data.restaurants \n//     state.value = state.value.filter(\n//         (restaurant) => restaurant.isPopular === true); \n//     break;\n// case \"openNow\":\n//     state.value = data.restaurants \n//     state.value = state.value.filter(\n//         (restaurant) => restaurant.isOpe n === true); \n//     break;\n// case \"mapView\":\n//     state.value = data.restaurants \n//     state.value = state.value.filter(\n//         (restaurant) => restaurant.isNew === true); \n//     break;\n\n//     default:\n//     state.value = state.value;\n//   }\n// }\n\n// export default restaurantsSlice.reducer;\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: {\n//     value: data.restaurants,\n//   },\n//   reducers: {\n//     restaurantPageFilter: (state, action) => {\n//     const filterType = action.payload;\n//       switch (filterType){\n//         case \"all\":\n//             state.value = data.restaurants \n//             break;\n//         case \"new\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isNew === true); \n//             break;\n//         case \"mostPopular\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isPopular === true); \n//             break;\n//         case \"openNow\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isOpen === true); \n//             break;\n//         case \"mapView\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isNew === true); \n//             break;\n\n//         default:\n//         state.value = state.value;\n//       }\n//     }\n// }\n// })\n\n// export const { restaurantPageFilter } = restaurantsSlice.actions;\n// export default restaurantsSlice.reducer;","map":{"version":3,"names":["createSlice","restaurantsSlice","name","initialState","restaurants","reducers","setRestaurants","state","action","payload","actions","fetchRestaurants","dispatch","response","fetch","data","json","filterType","filter","restaurant","isNew","isPopular","isOpen","error","console","log"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../epicure.json\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\nexport const restaurantsSlice = createSlice({\r\n  name: \"restaurants\",\r\n  initialState: { restaurants: [] },\r\n  reducers: {\r\n    setRestaurants: (state, action) => {\r\n      state.restaurants = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setRestaurants } = restaurantsSlice.actions;\r\n\r\n// Define an async thunk to fetch data from the server\r\nexport const fetchRestaurants = () => async (dispatch:any) => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:8000/epicure\");\r\n    const data = await response.json();\r\n    let filterType = data.restaurants;\r\n    switch (filterType) {\r\n        case \"all\":\r\n            filterType = data.restaurants \r\n        break;\r\n        case \"new\":\r\n        filterType = filterType.filter(\r\n          (restaurant:any) => restaurant.isNew === true\r\n        );\r\n        break;\r\n      case \"mostPopular\":\r\n        filterType = filterType.filter(\r\n          (restaurant:any) => restaurant.isPopular === true\r\n        );\r\n        break;\r\n      case \"openNow\":\r\n        filterType = filterType.filter(\r\n          (restaurant:any) => restaurant.isOpen === true\r\n        );\r\n        break;\r\n      case \"mapView\":\r\n        filterType = filterType.filter(\r\n          (restaurant:any) => restaurant.isNew === true\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    dispatch(setRestaurants(filterType));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// fetch(\"http://localhost:8000/epicure\")\r\n// .then((response) => response.json())\r\n// .then((data) => {\r\n//   console.log(data)\r\n//   // setStudents(data.studentsData);\r\n// });\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: { restaurants: [] },\r\n//   reducers: {\r\n//     setRestaurants: (state, action) => {\r\n//         state.restaurants = action.payload;\r\n//         // switch (state.restaurants){\r\n//         //     case \"all\":\r\n//         //         state.value = data.restaurants \r\n//         //         break;\r\n//         //     case \"new\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isNew === true); \r\n//         //         break;\r\n//         //     case \"mostPopular\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isPopular === true); \r\n//         //         break;\r\n//         //     case \"openNow\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isOpen === true); \r\n//         //         break;\r\n//         //     case \"mapView\":\r\n//         //         state.value = data.restaurants \r\n//         //         state.value = state.value.filter(\r\n//         //             (restaurant) => restaurant.isNew === true); \r\n//         //         break;\r\n            \r\n//         //     default:\r\n//         //     state.value = state.value;\r\n//         //   }\r\n//       }\r\n//     }\r\n//   });\r\n\r\n// export const { setRestaurants } = restaurantsSlice.actions; \r\n\r\n// export const fetchRestaurants = () => async (dispatch: (arg0: { payload: any; type: \"restaurants/setRestaurants\"; }) => void) => {\r\n//     try {\r\n//         const response = await fetch(\"http://localhost:8000/epicure\");\r\n//         const data = await response.json();\r\n//         dispatch(setRestaurants(data));\r\n//     } catch (error) {\r\n//         console.log(error);\r\n//     }\r\n//     };\r\n    // restaurantPageFilter: (state, action) => {\r\n    // const filterType = action.payload;\r\n    //   switch (filterType){\r\n    //     case \"all\":\r\n    //         state.value = data.restaurants \r\n    //         break;\r\n        // case \"new\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isNew === true); \r\n        //     break;\r\n        // case \"mostPopular\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isPopular === true); \r\n        //     break;\r\n        // case \"openNow\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isOpe n === true); \r\n        //     break;\r\n        // case \"mapView\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isNew === true); \r\n        //     break;\r\n        \r\n    //     default:\r\n    //     state.value = state.value;\r\n    //   }\r\n    // }\r\n\r\n\r\n// export default restaurantsSlice.reducer;\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: {\r\n//     value: data.restaurants,\r\n//   },\r\n//   reducers: {\r\n//     restaurantPageFilter: (state, action) => {\r\n//     const filterType = action.payload;\r\n//       switch (filterType){\r\n//         case \"all\":\r\n//             state.value = data.restaurants \r\n//             break;\r\n//         case \"new\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isNew === true); \r\n//             break;\r\n//         case \"mostPopular\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isPopular === true); \r\n//             break;\r\n//         case \"openNow\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isOpen === true); \r\n//             break;\r\n//         case \"mapView\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isNew === true); \r\n//             break;\r\n        \r\n//         default:\r\n//         state.value = state.value;\r\n//       }\r\n//     }\r\n// }\r\n// })\r\n\r\n// export const { restaurantPageFilter } = restaurantsSlice.actions;\r\n// export default restaurantsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAK9C,OAAO,MAAMC,gBAAgB,GAAGD,WAAW,CAAC;EAC1CE,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IAAEC,WAAW,EAAE;EAAG,CAAC;EACjCC,QAAQ,EAAE;IACRC,cAAc,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACH,WAAW,GAAGI,MAAM,CAACC,OAAO;IACpC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH;AAAe,CAAC,GAAGL,gBAAgB,CAACS,OAAO;;AAE1D;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAOC,QAAY,IAAK;EAC5D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;IAC7D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAClC,IAAIC,UAAU,GAAGF,IAAI,CAACX,WAAW;IACjC,QAAQa,UAAU;MACd,KAAK,KAAK;QACNA,UAAU,GAAGF,IAAI,CAACX,WAAW;QACjC;MACA,KAAK,KAAK;QACVa,UAAU,GAAGA,UAAU,CAACC,MAAM,CAC3BC,UAAc,IAAKA,UAAU,CAACC,KAAK,KAAK,IAAI,CAC9C;QACD;MACF,KAAK,aAAa;QAChBH,UAAU,GAAGA,UAAU,CAACC,MAAM,CAC3BC,UAAc,IAAKA,UAAU,CAACE,SAAS,KAAK,IAAI,CAClD;QACD;MACF,KAAK,SAAS;QACZJ,UAAU,GAAGA,UAAU,CAACC,MAAM,CAC3BC,UAAc,IAAKA,UAAU,CAACG,MAAM,KAAK,IAAI,CAC/C;QACD;MACF,KAAK,SAAS;QACZL,UAAU,GAAGA,UAAU,CAACC,MAAM,CAC3BC,UAAc,IAAKA,UAAU,CAACC,KAAK,KAAK,IAAI,CAC9C;QACD;MACF;QACE;IAAM;IAEVR,QAAQ,CAACN,cAAc,CAACW,UAAU,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;AACA;AACA;AACA;;AAGJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}