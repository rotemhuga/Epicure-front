{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// fetch(\"http://localhost:8000/epicure\")\n// .then((response) => response.json())\n// .then((data) => {\n//   console.log(data)\n//   // setStudents(data.studentsData);\n// });\n\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    restaurants: []\n  },\n  reducers: {\n    setRestaurants: (state, action) => {\n      state.restaurants = action.payload;\n      // switch (state.restaurants){\n      //     case \"all\":\n      //         state.value = data.restaurants \n      //         break;\n      //     case \"new\":\n      //         state.value = data.restaurants \n      //         state.value = state.value.filter(\n      //             (restaurant) => restaurant.isNew === true); \n      //         break;\n      //     case \"mostPopular\":\n      //         state.value = data.restaurants \n      //         state.value = state.value.filter(\n      //             (restaurant) => restaurant.isPopular === true); \n      //         break;\n      //     case \"openNow\":\n      //         state.value = data.restaurants \n      //         state.value = state.value.filter(\n      //             (restaurant) => restaurant.isOpen === true); \n      //         break;\n      //     case \"mapView\":\n      //         state.value = data.restaurants \n      //         state.value = state.value.filter(\n      //             (restaurant) => restaurant.isNew === true); \n      //         break;\n\n      //     default:\n      //     state.value = state.value;\n      //   }\n    }\n  }\n});\n\nexport const {\n  setRestaurants\n} = restaurantsSlice.actions;\nexport const fetchRestaurants = () => async dispatch => {\n  try {\n    const response = await fetch(\"http://localhost:8000/epicure\");\n    const data = await response.json();\n    dispatch(setRestaurants(data));\n  } catch (error) {\n    console.log(error);\n  }\n};\n// restaurantPageFilter: (state, action) => {\n// const filterType = action.payload;\n//   switch (filterType){\n//     case \"all\":\n//         state.value = data.restaurants \n//         break;\n// case \"new\":\n//     state.value = data.restaurants \n//     state.value = state.value.filter(\n//         (restaurant) => restaurant.isNew === true); \n//     break;\n// case \"mostPopular\":\n//     state.value = data.restaurants \n//     state.value = state.value.filter(\n//         (restaurant) => restaurant.isPopular === true); \n//     break;\n// case \"openNow\":\n//     state.value = data.restaurants \n//     state.value = state.value.filter(\n//         (restaurant) => restaurant.isOpen === true); \n//     break;\n// case \"mapView\":\n//     state.value = data.restaurants \n//     state.value = state.value.filter(\n//         (restaurant) => restaurant.isNew === true); \n//     break;\n\n//     default:\n//     state.value = state.value;\n//   }\n// }\n\nexport default restaurantsSlice.reducer;\n\n// export const restaurantsSlice = createSlice({\n//   name: \"restaurants\",\n//   initialState: {\n//     value: data.restaurants,\n//   },\n//   reducers: {\n//     restaurantPageFilter: (state, action) => {\n//     const filterType = action.payload;\n//       switch (filterType){\n//         case \"all\":\n//             state.value = data.restaurants \n//             break;\n//         case \"new\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isNew === true); \n//             break;\n//         case \"mostPopular\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isPopular === true); \n//             break;\n//         case \"openNow\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isOpen === true); \n//             break;\n//         case \"mapView\":\n//             state.value = data.restaurants \n//             state.value = state.value.filter(\n//                 (restaurant) => restaurant.isNew === true); \n//             break;\n\n//         default:\n//         state.value = state.value;\n//       }\n//     }\n// }\n// })\n\n// export const { restaurantPageFilter } = restaurantsSlice.actions;\n// export default restaurantsSlice.reducer;","map":{"version":3,"names":["createSlice","restaurantsSlice","name","initialState","restaurants","reducers","setRestaurants","state","action","payload","actions","fetchRestaurants","dispatch","response","fetch","data","json","error","console","log","reducer"],"sources":["C:/Users/ROTEM/Desktop/Course Fullstack/exercises/final project/Epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../epicure.json\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n// fetch(\"http://localhost:8000/epicure\")\r\n// .then((response) => response.json())\r\n// .then((data) => {\r\n//   console.log(data)\r\n//   // setStudents(data.studentsData);\r\n// });\r\n\r\nexport const restaurantsSlice = createSlice({\r\n  name: \"restaurants\",\r\n  initialState: { restaurants: [] },\r\n  reducers: {\r\n    setRestaurants: (state, action) => {\r\n        state.restaurants = action.payload;\r\n        // switch (state.restaurants){\r\n        //     case \"all\":\r\n        //         state.value = data.restaurants \r\n        //         break;\r\n        //     case \"new\":\r\n        //         state.value = data.restaurants \r\n        //         state.value = state.value.filter(\r\n        //             (restaurant) => restaurant.isNew === true); \r\n        //         break;\r\n        //     case \"mostPopular\":\r\n        //         state.value = data.restaurants \r\n        //         state.value = state.value.filter(\r\n        //             (restaurant) => restaurant.isPopular === true); \r\n        //         break;\r\n        //     case \"openNow\":\r\n        //         state.value = data.restaurants \r\n        //         state.value = state.value.filter(\r\n        //             (restaurant) => restaurant.isOpen === true); \r\n        //         break;\r\n        //     case \"mapView\":\r\n        //         state.value = data.restaurants \r\n        //         state.value = state.value.filter(\r\n        //             (restaurant) => restaurant.isNew === true); \r\n        //         break;\r\n            \r\n        //     default:\r\n        //     state.value = state.value;\r\n        //   }\r\n      }\r\n    }\r\n  });\r\n\r\nexport const { setRestaurants } = restaurantsSlice.actions; \r\n\r\nexport const fetchRestaurants = () => async (dispatch: (arg0: { payload: any; type: \"restaurants/setRestaurants\"; }) => void) => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:8000/epicure\");\r\n        const data = await response.json();\r\n        dispatch(setRestaurants(data));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n    };\r\n    // restaurantPageFilter: (state, action) => {\r\n    // const filterType = action.payload;\r\n    //   switch (filterType){\r\n    //     case \"all\":\r\n    //         state.value = data.restaurants \r\n    //         break;\r\n        // case \"new\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isNew === true); \r\n        //     break;\r\n        // case \"mostPopular\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isPopular === true); \r\n        //     break;\r\n        // case \"openNow\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isOpen === true); \r\n        //     break;\r\n        // case \"mapView\":\r\n        //     state.value = data.restaurants \r\n        //     state.value = state.value.filter(\r\n        //         (restaurant) => restaurant.isNew === true); \r\n        //     break;\r\n        \r\n    //     default:\r\n    //     state.value = state.value;\r\n    //   }\r\n    // }\r\n\r\n\r\nexport default restaurantsSlice.reducer;\r\n\r\n// export const restaurantsSlice = createSlice({\r\n//   name: \"restaurants\",\r\n//   initialState: {\r\n//     value: data.restaurants,\r\n//   },\r\n//   reducers: {\r\n//     restaurantPageFilter: (state, action) => {\r\n//     const filterType = action.payload;\r\n//       switch (filterType){\r\n//         case \"all\":\r\n//             state.value = data.restaurants \r\n//             break;\r\n//         case \"new\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isNew === true); \r\n//             break;\r\n//         case \"mostPopular\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isPopular === true); \r\n//             break;\r\n//         case \"openNow\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isOpen === true); \r\n//             break;\r\n//         case \"mapView\":\r\n//             state.value = data.restaurants \r\n//             state.value = state.value.filter(\r\n//                 (restaurant) => restaurant.isNew === true); \r\n//             break;\r\n        \r\n//         default:\r\n//         state.value = state.value;\r\n//       }\r\n//     }\r\n// }\r\n// })\r\n\r\n// export const { restaurantPageFilter } = restaurantsSlice.actions;\r\n// export default restaurantsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAI9C;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAGD,WAAW,CAAC;EAC1CE,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IAAEC,WAAW,EAAE;EAAG,CAAC;EACjCC,QAAQ,EAAE;IACRC,cAAc,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACH,WAAW,GAAGI,MAAM,CAACC,OAAO;MAClC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACF;EACF;AACF,CAAC,CAAC;;AAEJ,OAAO,MAAM;EAAEH;AAAe,CAAC,GAAGL,gBAAgB,CAACS,OAAO;AAE1D,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAOC,QAA+E,IAAK;EAC7H,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;IAC7D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAClCJ,QAAQ,CAACN,cAAc,CAACS,IAAI,CAAC,CAAC;EAClC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;AACA;AACA;AACA;;AAGJ,eAAehB,gBAAgB,CAACmB,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}